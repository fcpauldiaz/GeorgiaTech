out$nn[which.min(out$cvRmse)]),
rmse = c(min(out$kknnRmse), min(out$cvRmse)))
# Plot the RMSE for difference # of Nearest Neighbors
library(dplyr)
library(reshape2)
out.me <- melt(out, id.vars = "nn")
out.mins.me <- out.me %>% group_by(variable) %>% mutate(shape = min(value) == value)
g <- ggplot(data=out.me, aes(x=nn, y=value, color=variable)) +
geom_line() + geom_point(size=1.1) +
scale_color_discrete("Method", labels=c("kNN (OOS - 10% holdout)", "kNN (10-fold CV)")) +
labs(x="# of Nearest Neighbors", y="RMSE") +
geom_point(data=out.mins.me, aes(shape=shape), size=5, na.rm = T, show_guide=F) +
scale_shape_manual(values = c(NA, 1)) +
#   ggtitle("RMSE vs. # of Nearest Neighbors for KKNN") +
theme_bw() + theme(legend.position = c(0.8, 0.85))
PlotSetup('sweep_kknn')
print(g)
PlotDone()
# Plot various k values ----
fittedK <- function(k, test) {
kn <- kknn(price ~ mileage, train = cars.train, test = test, k = k)
return(kn$fitted.values)
}
cars.test.sorted <- cars.test[order(cars.test$mileage),]
kValues <- sort(c(12, 40, 500))
fitted <- data.frame(mileage = cars.test.sorted$mileage,
sapply(kValues, test=cars.test.sorted, FUN=fittedK))
# Legend still has slashes despite my best efforts with guides. :(
# wclark3: show_guide = F fixes this
#   also switched to scale_color_manual so I could make the linear fit black
#   (thought the default coloration was hard to look at)
# Replicates the ggplot2 color palette
# http://stackoverflow.com/questions/8197559/emulate-ggplot2-default-color-palette
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
g <- ggplot() + geom_point(data=cars, aes(x=mileage/1000, y=price/1000), alpha=0.3) +
geom_line(data=melt(fitted, id.vars="mileage"),
aes(x=mileage/1000, y=value/1000, color=variable), size=1.25) +
geom_abline(aes(intercept = lin$coefficients[1]/1000,
slope = lin$coefficients[2], color="break"), size=0.75, lty="dashed") +
scale_color_manual(values = c("#000000", gg_color_hue(length(kValues))),
name = "Algorithm",
labels = c("Linear", sapply(kValues, function(k) sprintf("kNN (k=%d)", k)))) +
guides(shape=guide_legend(override.aes = list(linetype = 0))) +
labs(x="Mileage [1000 miles]", y="Price [1000 $]") +
#   ggtitle("Predictive Models for Car Price vs. Mileage") +
theme_bw() + theme(legend.position = c(0.9, 0.75))
PlotSetup('pred_models')
plot(g)
PlotDone()
##
## Predict ----
##
miles.predict = c(100e3)
lin.pred <- predict(lin, data.frame(mileage=miles.predict))
# predicted price: $21,362.33
kCVmin <- algMins$nn[algMins$algo == "cv"]
knn.pred <- kknn(price ~ mileage, train = cars, test = data.frame(mileage=miles.predict), k = kCVmin)
# predicted price: kn.pred$fitted.values ($17,936.67)
preds <- data.frame(mileage = miles.predict,
linear.pred = lin.pred,
knn.pred = knn.pred$fitted.values)
cars.sorted <- cars[order(cars$mileage),]
knnFit40 = data.frame(mileage = cars.sorted$mileage,
pred = fittedK(40, cars.sorted))
g <- ggplot() +
geom_point(data=cars, aes(x=mileage/1000, y=price/1000), alpha=0.3) +
geom_line(data=knnFit40, aes(x=mileage/1000, y=pred/1000), color=gg_color_hue(2)[2], size=1.25) +
geom_abline(aes(intercept = lin$coefficients[1]/1000,
slope = lin$coefficients[2]), color=gg_color_hue(2)[1], linetype='dashed', size=1.25) +
geom_point(data=melt(preds, id.vars='mileage'),
aes(x=mileage/1000, y=value/1000, fill=variable),
color='black', pch=21, size=5) +
scale_fill_manual(values = c(gg_color_hue(2)),
name = "Algorithm",
labels = c("Linear Regression", "kNN (k=40)")) +
labs(x="Mileage [1000 miles]", y="Price [1000 $]") +
theme_bw() + theme(legend.position = c(0.8, 0.85))
PlotSetup("predict")
print(g)
PlotDone()
#
# RMSE ----
# This repeats a bunch of stuff, but I just wanted to be extra careful here.
lin.model <- glm(price ~ mileage, data = cars.train)
lin.pred <- predict(lin.model, data = cars.test)
lin.rmse <- sqrt(mean((cars.test$price - lin.pred)^2))
k12.pred <- kknn(price ~ mileage, train = cars.train, test = cars.test, k=12)
k12.rmse <- sqrt(mean((cars.test$price - k12.pred$fitted.values)^2))
k40.pred <- kknn(price ~ mileage, train = cars.train, test = cars.test, k=40)
k40.rmse <- sqrt(mean((cars.test$price - k40.pred$fitted.values)^2))
k500.pred <- kknn(price ~ mileage, train = cars.train, test = cars.test, k=500)
k500.rmse <- sqrt(mean((cars.test$price - k500.pred$fitted.values)^2))
rmse_compare <- data.frame(Algorithm=c("Linear", "kNN ($k=12$)", "kNN ($k=40$)", "kNN ($k=500$)"),
RMSE=c(lin.rmse, k12.rmse, k40.rmse, k500.rmse), row.names="Algorithm")
ExportTable(rmse_compare, "rmse_compare", "Comparison of RMSEs")
##
## Error distribution ----
##
epsilon <- data.frame(mileage = cars$mileage, price = cars$price, error = lin$residuals)
# epsilon <- epsilon[order(epsilon$price, decreasing = T), ]
g <- ggplot() + geom_point(data = epsilon, aes(x = mileage/1000, y = error/1000)) +
labs(x = "Mileage [1000 miles]", y = "Linear Model Residual [1000 $]") +
ggtitle("Distribution of Linear Model Residuals by Car Mileage") +
geom_hline(yintercept = 0, lty = "dashed") + theme_bw()
print(g)
# plot(epsilon$error)
?kmeans
Views(iris)
View(iris)
data <- iris
table(data)
table(data[,1:4])
table(data[,5], data$Species)
data[0]
data[,0]
data[0,]
data[1]
data[1]
data[1] <- NULL
View(data)
data <- iris
data <- data[-c(1)]
data <- iris
library(ggplot2)
ggplot(data, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data, aes(Sepal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point()
ggplot(data, aes(Sepal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data, aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
ggplot(data, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data, aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
table(irisCluster$cluster, iris$Species)
range<-2:20
tries <-100 #Run the K Means algorithm 100 times
avg.totw.ss <-integer(length(rng)) #Set up an empty vector to hold all of points
range<-2:20
tries <-100 #Run the K Means algorithm 100 times
avg.totw.ss <-integer(length(range)) #Set up an empty vector to hold all of points
for(v in range){ # For each value of the range variable
v.totw.ss <-integer(tries) #Set up an empty vector to hold the 100 tries
for(i in 1:tries){
k.temp <-kmeans(data[,1:4],centers=v) #Run kmeans
v.totw.ss[i] <-k.temp$tot.withinss#Store the total withinss
}
avg.totw.ss[v-1] <-mean(v.totw.ss) #Average the 100 total withinss
}
plot(range,avg.totw.ss,type="b", main="Total Within SS by Various K",
ylab="Average Total Within Sum of Squares",
xlab="Value of K")
?kmeans
View(data[c(2,3)])
irisCluster <- kmeans(data[, 2:3], 3, nstart = 20)
table(irisCluster$cluster, iris$Species)
irisCluster <- kmeans(data[, 3:4], 3, nstart = 20)
table(irisCluster$cluster, iris$Species)
data.scaled <- scale(data)
data.scaled <- scale(data[1:4])
ggplot(data.scaled , aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
View(data.scaled)
typeof(data.scaled)
typeof(data)
data.scaled <- data.frame(data.scaled)
typeof(data.scaled)
ggplot(data.scaled , aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
View(data.scaled)
ggplot(data , aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
scdata <- data # initialize value/size of sdata
for (i in 1:4) { scdata[,i] <- (data[,i]-min(data[,i]))/(max(data[,i])-min(data[,i])) }
View(scdata)
apply(data, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
m <- matrix(rnorm(9), ncol=3)
apply(m, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
apply(data, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
apply(data[1:4], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
View(data)
data.scaled <- apply(data[1:4], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
ggplot(data.scaled , aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
d <- data.frame(data.scaled)
d
ggplot(d , aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
irisCluster <- kmeans(data.scaled[, 2:3], 3, nstart = 20)
irisCluster
range<-2:20
tries <-100 #Run the K Means algorithm 100 times
avg.totw.ss <-integer(length(range)) #Set up an empty vector to hold all of points
for(v in range){ # For each value of the range variable
v.totw.ss <-integer(tries) #Set up an empty vector to hold the 100 tries
for(i in 1:tries){
k.temp <-kmeans(data.scaled[,2:3],centers=v) #Run kmeans
v.totw.ss[i] <-k.temp$tot.withinss#Store the total withinss
}
avg.totw.ss[v-1] <-mean(v.totw.ss) #Average the 100 total withinss
}
plot(range,avg.totw.ss,type="b", main="Total Within SS by Various K",
ylab="Average Total Within Sum of Squares",
xlab="Value of K")
rm(list = ls())
data <- iris
data <- data[,2:6] # shift data columns to remove column 1 (sequence number)
head(data)
table(data[,5], data$Species)
set.seed(1)
library(ggplot2)
ggplot(data, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point()
irisClusterALL2 <- kmeans(data[,1:4], 2, nstart = 20)
irisClusterALL3 <- kmeans(data[,1:4], 3, nstart = 20)
irisClusterALL4 <- kmeans(data[,1:4], 4, nstart = 20)
irisClusterALL5 <- kmeans(data[,1:4], 5, nstart = 20)
scdata <- data # initialize value/size of sdata
for (i in 1:4) { scdata[,i] <- (data[,i]-min(data[,i]))/(max(data[,i])-min(data[,i])) }
irisClusterALLsc2 <- kmeans(scdata[,1:4], 2, nstart = 20)
irisClusterALLsc3 <- kmeans(scdata[,1:4], 3, nstart = 20)
irisClusterALLsc4 <- kmeans(scdata[,1:4], 4, nstart = 20)
irisClusterALLsc5 <- kmeans(scdata[,1:4], 5, nstart = 20)
csum = 0
for (i in 1:nrow(data)) {
# ...add the distance between its point and its cluster center
csum = csum + dist(rbind(data[i,1:4],irisClusterALL2$centers[irisClusterALL2$cluster[i],]))
}
csum[1]
table(irisClusterALL2$cluster, data$Species)
table(irisClusterALLsc2$cluster, data$Species)
table(irisClusterALL3$cluster, data$Species)
table(irisClusterALLsc3$cluster, data$Species)
table(irisClusterALL4$cluster, data$Species)
table(irisClusterALLsc4$cluster, data$Species)
table(irisClusterALL5$cluster, data$Species)
table(irisClusterALLsc5$cluster, data$Species)
irisClusterPET2 <- kmeans(data[,3:4], 2, nstart = 20)
irisClusterPET3 <- kmeans(data[,3:4], 3, nstart = 20)
irisClusterPET4 <- kmeans(data[,3:4], 4, nstart = 20)
irisClusterPET5 <- kmeans(data[,3:4], 5, nstart = 20)
irisClusterPETsc2 <- kmeans(scdata[,3:4], 2, nstart = 20)
irisClusterPETsc3 <- kmeans(scdata[,3:4], 3, nstart = 20)
irisClusterPETsc4 <- kmeans(scdata[,3:4], 4, nstart = 20)
irisClusterPETsc5 <- kmeans(scdata[,3:4], 5, nstart = 20)
table(irisClusterPET2$cluster, data$Species)
table(irisClusterPETsc2$cluster, data$Species)
table(irisClusterPET3$cluster, data$Species)
table(irisClusterPETsc3$cluster, data$Species)
table(irisClusterPET4$cluster, data$Species)
table(irisClusterPETsc4$cluster, data$Species)
table(irisClusterPET5$cluster, data$Species)
table(irisClusterPETsc5$cluster, data$Species)
irisClusterPETsc3
ggplot(iris, aes(Petal.Length, Petal.Width, color = irisClusterPETsc3$cluster)) + geom_point()
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
data.scaled<- data[,c(1,2,3,4)]
data.scaled$Sepal.Length<- normalize(data.scaled$Sepal.Length)
data.scaled$Sepal.Width<- normalize(data.scaled$Sepal.Width)
data.scaled$Petal.Length<- normalize(data.scaled$Petal.Length)
data.scaled$Petal.Width<- normalize(data.scaled$Petal.Width)
par(mfrow=c(2,2), mar=c(5,4,2,2))
result<- kmeans(data,scaled,3)
result<- kmeans(data.scaled,3)
plot(data.scaled[c(1,2)], col=result$cluster)
iris.class<- data[,"Species"]
plot(data.scaled[c(3,4)], col=result$cluster)
plot(data.scaled[c(3,4)], col=iris.class)
table(result$cluster,iris.class)
result$cluster
table(irisClusterPETsc3$cluster, data$Species)
kc <- result
kc$betweenss/kc$totss*100
kc <- irisClusterPETsc3
kc$betweenss/kc$totss*100
rm(list = ls())
set.seed(42) # the answer of life
# default dataset in R, this has the response variable but it should be used only to compare
data <- iris
# according to the TA we can plot the data to have an idea how we can cluster
library(ggplot2)
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
# we should scale the data, mean = 0 and stdev = 1
data.scaled$Sepal.Length<- normalize(data.scaled$Sepal.Length)
data.scaled$Sepal.Width<- normalize(data.scaled$Sepal.Width)
data.scaled$Petal.Length<- normalize(data.scaled$Petal.Length)
data.scaled$Petal.Width<- normalize(data.scaled$Petal.Width)
# after testing a few plots, this give us 3 potential groups
ggplot(data , aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
rm(list = ls())
set.seed(42) # the answer of life
# default dataset in R, this has the response variable but it should be used only to compare
data <- iris
# according to the TA we can plot the data to have an idea how we can cluster
library(ggplot2)
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
# we should scale the data, mean = 0 and stdev = 1
data.scaled<- data[,c(1,2,3,4)]
data.scaled$Sepal.Length<- normalize(data.scaled$Sepal.Length)
data.scaled$Sepal.Width<- normalize(data.scaled$Sepal.Width)
data.scaled$Petal.Length<- normalize(data.scaled$Petal.Length)
data.scaled$Petal.Width<- normalize(data.scaled$Petal.Width)
ggplot(data , aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
range<-1:10
tries <-2 #Run the K Means algorithm 100 times
avg.totw.ss <-integer(length(range)) #Set up an empty vector to hold all of points
for(v in range){ # For each value of the range variable
v.totw.ss <-integer(tries) #Set up an empty vector to hold the 100 tries
for(i in 1:tries){
k.temp <-kmeans(data.scaled[,2:3],centers=v) #Run kmeans
v.totw.ss[i] <-k.temp$tot.withinss#Store the total withinss
}
print (v.towt.ss)
avg.totw.ss[v-1] <-mean(v.totw.ss) #Average the 100 total withinss
}
range<-1:10
tries <-2 #Run the K Means algorithm 100 times
avg.totw.ss <-integer(length(range)) #Set up an empty vector to hold all of points
for(v in range){ # For each value of the range variable
v.totw.ss <-integer(tries) #Set up an empty vector to hold the 100 tries
for(i in 1:tries){
k.temp <-kmeans(data.scaled[,2:3],centers=v) #Run kmeans
v.totw.ss[i] <-k.temp$tot.withinss#Store the total withinss
}
print (v.towt.ss)
avg.totw.ss[v-1] <-mean(v.totw.ss) #Average the 100 total withinss
}
range<-1:10
tries <-2 #Run the K Means algorithm 100 times
avg.totw.ss <-integer(length(range)) #Set up an empty vector to hold all of points
for(v in range){ # For each value of the range variable
v.totw.ss <-integer(tries) #Set up an empty vector to hold the 100 tries
for(i in 1:tries){
k.temp <-kmeans(data.scaled[,2:3],centers=v) #Run kmeans
v.totw.ss[i] <-k.temp$tot.withinss#Store the total withinss
}
print (v.totw.ss)
avg.totw.ss[v-1] <-mean(v.totw.ss) #Average the 100 total withinss
}
range<-1:10
n <-50 #Run the K Means algorithm n times
avg <-integer(length(range)) #Set up an empty vector to hold all of points
for(v in range){ # For each value of the range variable
value <-integer(tries) #Set up an empty vector to hold the n tries
for(i in 1:tries){
k.temp <-kmeans(data.scaled[,2:3],centers=v) #Run kmeans
value[i] <-k.temp$betweenss/k.temp$totss*100 #store accuracy
}
avg[v] <-mean(v.totw.ss) #Average the n total accuracy
}
range<-1:10
n <-50 #Run the K Means algorithm n times
avg <-integer(length(range)) #Set up an empty vector to hold all of points
for(v in range){ # For each value of the range variable
value <-integer(tries) #Set up an empty vector to hold the n tries
for(i in 1:tries){
k.temp <-kmeans(data.scaled[,2:3],centers=v) #Run kmeans
value[i] <-k.temp$betweenss/k.temp$totss*100 #store accuracy
}
avg[v] <-mean(value) #Average the n total accuracy
}
plot(range,avg,type="b", main="Elbow diagram",
ylab="Average Total Within Sum of Squares",
xlab="Value of K")
range<-1:10
n <-50 #Run the K Means algorithm n times
avg <-integer(length(range)) #Set up an empty vector to hold all of points
for(v in range){ # For each value of the range variable
value <-integer(tries) #Set up an empty vector to hold the n tries
for(i in 1:tries){
k.temp <-kmeans(data.scaled[,3:4],centers=v) #Run kmeans
value[i] <-k.temp$betweenss/k.temp$totss*100 #store accuracy
}
avg[v] <-mean(value) #Average the n total accuracy
}
plot(range,avg,type="b", main="Elbow diagram",
ylab="Average Total Within Sum of Squares",
xlab="Value of K")
View(avg)
avg
range<-1:10
n <-50 #Run the K Means algorithm n times
avg <-integer(length(range)) #Set up an empty vector to hold all of points
for(v in range){ # For each value of the range variable
value <-integer(tries) #Set up an empty vector to hold the n tries
for(i in 1:tries){
k.temp <-kmeans(data.scaled[,3:4],centers=v) #Run kmeans
value[i] <-k.temp$betweenss/k.temp$totss*100 #store accuracy
}
print(value)
avg[v] <-mean(value) #Average the n total accuracy
}
n <-50 #Run the K Means algorithm n times
avg <-integer(length(range)) #Set up an empty vector to hold all of points
for(v in range){ # For each value of the range variable
value <-integer(tries) #Set up an empty vector to hold the n tries
for(i in 1:n){
k.temp <-kmeans(data.scaled[,3:4],centers=v) #Run kmeans
value[i] <-k.temp$betweenss/k.temp$totss*100 #store accuracy
}
avg[v] <-mean(value) #Average the n total accuracy
}
plot(range,avg,type="b", main="Elbow diagram",
ylab="Average Total Within Sum of Squares",
xlab="Value of K")
kmeans(data.scaled[,3:4],centers=3)
z <- kmeans(data.scaled[,3:4],centers=3)
table(z)
table(z$cluster, data$Species)
z <- kmeans(data.scaled[,3:4],centers=5)
table(z$cluster, data$Species)
k.temp <- z
k.temp$betweenss/k.temp$totss*100
rm(list = ls())
data <- iris
data <- data[,2:6] # shift data columns to remove column 1 (sequence number)
head(data)
table(data[,5], data$Species)
set.seed(1)
library(ggplot2)
ggplot(data, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point()
irisClusterALL2 <- kmeans(data[,1:4], 2, nstart = 20)
irisClusterALL3 <- kmeans(data[,1:4], 3, nstart = 20)
irisClusterALL4 <- kmeans(data[,1:4], 4, nstart = 20)
irisClusterALL5 <- kmeans(data[,1:4], 5, nstart = 20)
scdata <- data # initialize value/size of sdata
for (i in 1:4) { scdata[,i] <- (data[,i]-min(data[,i]))/(max(data[,i])-min(data[,i])) }
irisClusterALLsc2 <- kmeans(scdata[,1:4], 2, nstart = 20)
irisClusterALLsc3 <- kmeans(scdata[,1:4], 3, nstart = 20)
irisClusterALLsc4 <- kmeans(scdata[,1:4], 4, nstart = 20)
irisClusterALLsc5 <- kmeans(scdata[,1:4], 5, nstart = 20)
csum = 0
for (i in 1:nrow(data)) {
# ...add the distance between its point and its cluster center
csum = csum + dist(rbind(data[i,1:4],irisClusterALL2$centers[irisClusterALL2$cluster[i],]))
}
csum[1]
table(irisClusterALL2$cluster, data$Species)
table(irisClusterALLsc2$cluster, data$Species)
table(irisClusterALL3$cluster, data$Species)
table(irisClusterALLsc3$cluster, data$Species)
table(irisClusterALL4$cluster, data$Species)
table(irisClusterALLsc4$cluster, data$Species)
table(irisClusterALL5$cluster, data$Species)
table(irisClusterALLsc5$cluster, data$Species)
irisClusterPET2 <- kmeans(data[,3:4], 2, nstart = 20)
irisClusterPET3 <- kmeans(data[,3:4], 3, nstart = 20)
irisClusterPET4 <- kmeans(data[,3:4], 4, nstart = 20)
irisClusterPET5 <- kmeans(data[,3:4], 5, nstart = 20)
irisClusterPETsc2 <- kmeans(scdata[,3:4], 2, nstart = 20)
irisClusterPETsc3 <- kmeans(scdata[,3:4], 3, nstart = 20)
irisClusterPETsc4 <- kmeans(scdata[,3:4], 4, nstart = 20)
irisClusterPETsc5 <- kmeans(scdata[,3:4], 5, nstart = 20)
table(irisClusterPET2$cluster, data$Species)
table(irisClusterPETsc2$cluster, data$Species)
table(irisClusterPET3$cluster, data$Species)
table(irisClusterPETsc3$cluster, data$Species)
table(irisClusterPET4$cluster, data$Species)
table(irisClusterPETsc4$cluster, data$Species)
table(irisClusterPET5$cluster, data$Species)
table(irisClusterPETsc5$cluster, data$Species)
irisClusterPETsc3
ggplot(iris, aes(Petal.Length, Petal.Width, color = irisClusterPETsc3$cluster)) + geom_point()
k.temp <- irisClusterPETsc3
print (k.temp$betweenss/k.temp$totss*100)
k.temp <- irisClusterPETsc5
print (k.temp$betweenss/k.temp$totss*100)
ggplot(iris, aes(Petal.Length, Petal.Width, color = irisClusterPETsc5$cluster)) + geom_point()
?kmeans
ggplot(data , aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data , aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point()
ggplot(data , aes(Sepal.Length, Pepal.Width, color = Species)) + geom_point()
ggplot(data , aes(Sepal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data , aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
ggplot(data , aes(Sepal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data , aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(data , aes(Petal.Length, Sepal.Width, color = Species)) + geom_point()
ggplot(data , aes(Sepal.Length, Petal.Width, color = Species)) + geom_point()
View(data)
data<-data[c(1,4)]
cluster3 <- kmeans(data.scaled[3:4],3)
data.scaled<- data[,c(1,2,3,4)]
data.scaled$Sepal.Length<- normalize(data.scaled$Sepal.Length)
data.scaled$Sepal.Width<- normalize(data.scaled$Sepal.Width)
data.scaled$Petal.Length<- normalize(data.scaled$Petal.Length)
data.scaled$Petal.Width<- normalize(data.scaled$Petal.Width)
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
data <- iris
data.scaled<- data[,c(1,2,3,4)]
data.scaled$Sepal.Length<- normalize(data.scaled$Sepal.Length)
data.scaled$Sepal.Width<- normalize(data.scaled$Sepal.Width)
data.scaled$Petal.Length<- normalize(data.scaled$Petal.Length)
data.scaled$Petal.Width<- normalize(data.scaled$Petal.Width)
cluster4 <- kmeans(data.scaled[c(1,4)],4, nstart = 20)
table(cluster4$cluster, data$Species)
cluster4 <- kmeans(data.scaled[c(1,4)],4, nstart = 10)
table(cluster4$cluster, data$Species)
cluster4 <- kmeans(data.scaled[c(1,4)],4, nstart = 1)
table(cluster4$cluster, data$Species)
cluster4 <- kmeans(data.scaled[c(1,4)],4, nstart = 5)
table(cluster4$cluster, data$Species)
cluster3 <- kmeans(data.scaled[c(1,4)],3, nstart = 10)
table(cluster3$cluster, data$Species)
ggplot(data, aes(Sepal.Length, Petal.Width, color = cluster4$cluster)) + geom_point()
ggplot(data, aes(Sepal.Length, Petal.Width, color = cluster3$cluster)) + geom_point()
